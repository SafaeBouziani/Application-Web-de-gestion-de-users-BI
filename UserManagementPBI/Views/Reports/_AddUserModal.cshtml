@model UserManagementPBI.ViewModels.AddUserToGroupViewModel
@using Newtonsoft.Json


@{
    Layout = null; // This is a partial rendered via AJAX
    var usersMap = ViewBag.UsersMap as Dictionary<int, string> ?? new Dictionary<int, string>();
}

<div class="modal fade" id="AddUserModal" tabindex="-1" role="dialog" aria-labelledby="AddUserModalLabel" aria-hidden="true"
     data-selectedusers='@Html.Raw(JsonConvert.SerializeObject(Model.SelectedExistingUserIds))'
     data-users='@Html.Raw(JsonConvert.SerializeObject(usersMap))'>
    <div class="modal-dialog modal-xl modal-dialog-centered" role="document">
        <div class="modal-content">

            <div class="modal-header">
                <h5 class="modal-title" id="EditReportModalLabel">Edit Group (@Model.Id)</h5>
                <button type="button" class="close btn-close-modal" data-dismiss="modal" aria-label="Close"><span aria-hidden="true">&times;</span></button>
            </div>

            <div class="modal-body">
                <form id="add-user-form" method="post" style="display:none;">
                    @Html.AntiForgeryToken()
                </form>

                <input type="hidden" id="group-id" value="@Model.Id" />



                <hr class="my-3" />

                <div class="form-group">
                    <label for="user-select">Users</label>
                    <select id="user-select" multiple class="form-control"></select>
                    <small class="form-text text-muted">Search and select users to include in this group.</small>
                </div>

                <hr class="my-3" />


            </div>

            <div class="modal-footer">
                <button type="button" class="btn btn-secondary btn-close-modal" data-dismiss="modal">Cancel</button>
                <button type="button" class="btn btn-success" id="btn-save-edit">Save</button>
            </div>
        </div>
    </div>
</div>

<script>
    (function () {
        // Scoped to this partial/modal
        var $m = $('#AddUserModal');
        var choicesInstance = null;

        // Defensive: destroy Choices instance if modal is removed
        function destroyChoices() {
            try {
                if (choicesInstance && typeof choicesInstance.destroy === 'function') {
                    choicesInstance.destroy();
                }
            } catch (e) { /* noop */ }
            choicesInstance = null;
        }

        // Local UI state
        var state = {
            
            usersMap: {},
            selectedUserIds: []
        };

        // Render a single report row



        function initUsersSelect() {
            var selectEl = $m.find('#user-select').get(0);
            if (!selectEl) return;

            // Normalize global map
            if (typeof window.__usersMap === 'undefined' || !window.__usersMap || Object.keys(window.__usersMap).length === 0) {
                window.__usersMap = state.usersMap || {};
            }
            var map = {};
            Object.keys(window.__usersMap).forEach(function (k) {
                map[String(k)] = window.__usersMap[k];
            });
            window.__usersMap = map; // overwrite with normalized

            // Kill any previous instance
            destroyChoices();

            // Init Choices
            choicesInstance = new Choices(selectEl, {
                removeItemButton: true,
                searchEnabled: true,
                shouldSort: false,
                placeholder: true,
                placeholderValue: 'Select users'
            });

            // Load ALL users into dropdown
            var allChoices = Object.keys(map).map(function (id) {
                return { value: id, label: map[id] };
            });
            choicesInstance.setChoices(allChoices, 'value', 'label', true);

            // Preselect the assigned users
            var selectedIds = (state.selectedUserIds || []).map(String);
            choicesInstance.setChoiceByValue(selectedIds);
        }



        // Submit handler
        async function submitEdit() {


            var payload = {
                Id: Number($m.find('#group-id').val()),
                SelectedExistingUserIds: (choicesInstance ? choicesInstance.getValue(true) : [])
                    .map(v => Number(v))
                    .filter(n => !Number.isNaN(n)),
            };


            try {
                var resp = await fetch('/Reports/AddUserToGroup', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify(payload),
                    credentials: 'same-origin'
                });

                if (!resp.ok) {
                    var tx = await resp.text();
                    console.error('Server error:', tx);
                    alert('Failed to save changes.');
                    return;
                }

                var data = await resp.json();
                if (data && data.success) {
                    $m.modal('hide');
                    // Reload to reflect changes
                    location.reload();
                } else {
                    alert('Save failed.');
                }
            } catch (e) {
                console.error(e);
                alert('Network error.');
            }
        }

        // Bind once when the modal is inserted (script is part of partial)
        $m.on('shown.bs.modal', function () {
            // Parse datasets

            try {
                state.selectedUserIds = JSON.parse($m.attr('data-selectedusers') || '[]') || [];
            } catch (e) { state.selectedUserIds = []; }
            try {
                var rawUsers = JSON.parse($m.attr('data-users') || '{}') || {};
                // Normalize keys to strings:
                var normalized = {};
                Object.keys(rawUsers).forEach(function (k) {
                    normalized[String(k)] = rawUsers[k];
                });
                state.usersMap = normalized;
            } catch (e) { state.usersMap = {}; }


            initUsersSelect();
        });


        $m.on('click', '.btn-close-modal', function () { $m.modal('hide'); });

        $m.on('click', '#btn-save-edit', function () {
            submitEdit();
        });

        // Cleanup Choices when modal hidden/removed
        $m.on('hidden.bs.modal', function () {
            destroyChoices();
            $m.remove(); // optional: remove modal from DOM after closing if you append per-open
        });
    })();
</script>


